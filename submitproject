#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'yaml'
require 'tmpdir'
require 'singleton'
require 'logger'

class Options
  include Singleton

  def initialize
    @logger = EmptyLogger.new
  end

  attr_accessor :logger, :debug_project, :osc_cmd
end

class EmptyLogger
  [:debug, :info, :warning, :error ].each do |f|
    define_method(f) {}
  end
end

def osc_cmd
  Options.instance.osc_cmd
end

def log
  Options.instance.logger
end

# create a submit request
def create_sr(package,from,to)
  puts "Creating submit request for package #{package} from #{from} to #{to}"
  if Options.instance.debug_project
    to = Options.instance.debug_project
    puts "Creating submit request for package #{package} from #{from} to #{to}"
  end
  log.info "Creating submit request for package #{package} from #{from} to #{to}"
  if system("#{osc_cmd} sr #{from} #{package} #{to}")
    request = `#{osc_cmd} request list #{to} #{package} |grep State:new |head -n 1 |cut -d\\  -f2`
    log.info "Created request id #{request}"
  end
end
 
#ask a Yes/No question
def ask(question)
  puts question
  begin
    system "stty raw -echo"
    out = STDIN.getc.chr.downcase
  ensure
    system "stty -raw echo"
  end
  return case out
    when 'c' then exit
    when 'y' then true
    when 'n' then false
    else ask(question)
  end
end

#ask whether to submit a package or not, submit if requested
def ask_submit(package, from, to, question)
  if ask question
    create_sr(package, from, to)
    return true
  else
    puts "Skipping package #{package}"
    return false
  end
end

# print diff of a specific file; return true if files differ
def file_diff(package, from, to, file)
  ret = true
  Dir.mktmpdir {|tmpdir| 
    files_found = system("cd #{tmpdir} && #{osc_cmd} co #{from} #{package} #{file} && mv #{file} #{file}.new && #{osc_cmd} co #{to} #{package} #{file} >/dev/null 2>&1")
    unless files_found
      puts "=== Cannot check out file #{file} from package #{package}"
      ret = true
    else
      ret = ! system("cd #{tmpdir} && diff  #{file} #{file}.new")
    end
  }
  ret
end

def changelog_diff(package, from, to)
  unless file_diff(package, from, to, "#{package}.changes")
    puts "=== Changelog has not changed..."
    return false
  end
  return true
end

def find_package_in_prjlist(package, prjlist)
  prjlist.detect do |project|
    # works only in ruby 1.9 system osc_cmd, "ls", project, package, :out => :close, :err => :close
    system "#{osc_cmd} ls #{project} #{package} 2>/dev/null 1>/dev/null"
  end
end

def find_package(package,projects)
  project = projects.detect do |prjlist|
    find_package_in_prjlist(package, prjlist)
  end
  if project
    return project.first, find_package_in_prjlist(package, project)
  end
  return nil
end

def submit_project(project, options)
  Options.instance.logger = Logger.new options.logfile if options.logfile
  Options.instance.debug_project = options.debug_project
  Options.instance.osc_cmd = options.api_url ? "osc -A #{options.api_url} " : "osc "
  prjconf = options.prjconf ? options.prjconf : "~/.oscsubmit"
  projects = YAML.load_file(File.expand_path(prjconf, __FILE__))
  # filter out generated packages
  pkglist = `#{osc_cmd} ls #{project} |grep -v _product:`
  pkglist.split.each do |package|
    puts "=== Analyzing package #{package}..."
    target_project, project_found = find_package(package,projects[project])
    if target_project == nil
      target_project = projects[project].first.first;
    end
    if project_found
      puts "=== Package #{package} found in project #{target_project}"
      if (package == "_product")
        changed = false;
        `#{osc_cmd} ls #{project} #{package} |grep '\\(product\\|group\\|spec\\)$'`.split.each do |file|
          changed ||= file_diff(package, project, target_project, file)
        end
        if (changed)
          ask_submit(package, project, target_project, "=== Submit package #{package} to #{target_project}? (y/n/c)")
        else
          puts "Package #{package} not changed, skipping..."
        end
      else
        changed = false
        if changelog_diff(package, project, target_project)
          changed = true
        else
          diff = `#{osc_cmd} rdiff #{target_project} #{package} #{project}`
          puts diff
          changed = diff != ""
        end
        if changed
          submitted = ask_submit(package, project, target_project, "=== Submit package #{package} to #{target_project}? (y/n/c)")
          unless submitted || target_project == projects[project][0][0]
            target_project = projects[project][0][0];
            ask_submit(package, project, target_project, "=== Submit package #{package} to #{target_project}? (y/n/c)")
          end
        else
           puts "Package #{package} not changed, skipping..."
        end
      end
    else
      ask_submit(package, project, target_project, "=== Package #{package} is new. Submit to #{target_project}? (y/n/c)")
    end
  end
end

def go
  options = {}
  help = ''
  create_opts = OpenStruct.new
  parser = OptionParser.new do |opts|
    opts.banner = ("Usage: submitproject PROJECT_ID [options]")
    opts.separator ""

    opts.on("-A", "--apiurl API_URL", String,
            "URL of the Open Build Service API") do |api_url|
      create_opts.api_url = api_url
    end
    opts.on("-p", "--prjconf PROJECT_CONFIG", String,
            "Configuration of sumit target projects") do |prjconf|
      create_opts.prjconf = prjconf
    end
    opts.on("-l", "--log LOGDILE", String,
            "Store information to notify the AutoBuild team") do |logfile|
      create_opts.logfile = logfile
    end
    opts.on("-d", "--debug_project PROJECT", String,
            "Create all submit request to different project; for debugging purposes") do |debug_project|
      create_opts.debug_project = debug_project
    end

    opts.on_tail("-h", "--help", "Show this help and exit") do |v|
      options[:help] = v
      puts opts.to_s
      exit 0
    end

    help = opts.to_s
  end.parse!

  if ARGV.empty?
    $stderr.puts help
    exit 1
  elsif ARGV.one?
    if create_opts.logfile
      open(create_opts.logfile, 'w') { |f|
        f.puts "Submitting project #{ARGV[0]}"
      }
    end
    submit_project(ARGV[0], create_opts)
  else
    raise(OptionParser::ParseError,
          "Got too many arguments. See --help for usage.")
  end

rescue OptionParser::ParseError
  $stderr.puts("Could not process command line arguments. "+
               "#{$!} #{ARGV.join(' ')}")
  exit 1
end

go
